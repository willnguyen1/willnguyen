var store = [{
        "title": "Object Oriented Programming",
        "excerpt":"A programming style based-object, class as blueprint, object as instance of class      Inheritance: reused method of parent obj   Polomorphism: ability of a variable   Abstract: Hide the complexity   Encapsulate: wrapping the data and code   Association:   Aggregation:   Composition:   Benefit:   Break software into smaller part for easy to understand and maintain Can reused in other programs Enhance program modularity, loose coupling.  ","categories": ["Web Architecture"],
        "tags": ["Web Architecture"],
        "url": "https://willnguyen.work//web%20architecture/oop-object-oriented/",
        "teaser":null},{
        "title": "MVC Architecture",
        "excerpt":"   MVC separates an application into 3 main logical components Model, View, and Controller. (domain/application/business)   Separation of concerns (SoC) is a design principle for separating a computer program into distinct sections.   All frameworks support MVC, already let placeholder: where to put view, where to put model, and controller. Developer often follow it, means follow MVC architecture without realize it.      3-tier Architecture vs. MVC Architecture                  Parameter       3-Tier Architecture       MVC Architecture                       Communication       This type of architecture pattern never communicates directly with the data layer.       All layers communicate directly using triangle topology.                 Usage       widely used in web applications where the client, data tiers, and middleware a run on physically separate platforms.       Generally used on applications that run on a single graphical workstation.           Ref:     https://www.guru99.com/mvc-tutorial.html  ","categories": ["Web Architecture"],
        "tags": ["Web Architecture"],
        "url": "https://willnguyen.work//web%20architecture/mvc-architecture/",
        "teaser":null},{
        "title": "Unit Test",
        "excerpt":"Two handy reminders when you are thinking about what to test in your unit tests are:   Right-BICEP   Right - Are the results right?      B - are all the boundary conditions correct?   I - can you check the inverse relationships?   C - can you cross-check results using other means?   E - can you force error conditions to happen?   P - are performance characteristics within bounds?   CORRECT      C - Conformance - does the value conform to an expected format?   O - Ordering - is the set of values ordered or unordered as appropriate?   R - Range - is the value within reasonable minimum and maximum values?   R - Reference - does the code reference anything external that isn’t under direct control of the code itself?   E - Existence - does the value exist (e.g. is not null, non-zero, present in a set)?   C - Cardinality - are there exactly enough values?   T - Time (absolute and relative) - is everything happening in order? At the right time? In time?   FIRST      F - Fast   I - Isolated   R - Repeatable   S - Self-validating   T - Timely   Ref: F.I.R.S.T Principles of Unit Testing  ","categories": ["Web Architecture"],
        "tags": ["Unit Test"],
        "url": "https://willnguyen.work//web%20architecture/unit-testing/",
        "teaser":null},{
        "title": "SOLID Principles",
        "excerpt":"   SOLID is an acronym for 5 important design principles when doing OOP            Single Responsibility, Open-closed, Liskov Substitution, Interface Segregation and Dependency Inversion.           Introduced by Robert C. Martin (Uncle Bob). Design Principles and Design Patterns   Intention of SOLID is to make software designs more understandable, easier to maintain and easier to extend.   Single Responsibility Principle   One class should only serve one purpose. Do not mix (save() and get() in same function)   Open-closed Principle   Entities should be open for extension, but closed for modification. (Polymorphism)   Liskov Substitution Principle   “Data abstraction”, about bad inheritance           Tech explain:       Let φ(x) be a property provable about objects x of type T.    Then φ(y) should be true for objects y of type S where S is a subtype of T.            Human explain:              Preconditions cannot be strengthened in a subtype.       Postconditions cannot be weakened in a subtype.       Invariants of the supertype must be preserved in a subtype.                Robert Martin:   Subclass/derived class should be substitutable for their base/parent class.       Interface Segregation Principle   A Client should not be forced to implement an interface that it doesn’t use. Break our interfaces in many smaller ones   Dependency Inversion Principle   High-level modules should not depend on low-level modules. Both should depend on abstractions. (About decoupling by share abstraction)   Abstractions should not depend on details. Details should depend on abstractions.   Ref:     https://itnext.io/solid-principles-explanation-and-examples-715b975dcad4  ","categories": ["Object Oriented Design"],
        "tags": ["Web Architecture"],
        "url": "https://willnguyen.work//object%20oriented%20design/solid-principles/",
        "teaser":null},{
        "title": "Software Architecture",
        "excerpt":"   What is software architecture? The answer is multitiered.   Architecture patterns: define the overall shape and structure of software applications. (MVC, REST, P2P, Layer…)   Design Principles: (SOLID) high level guidelines to design better software.   Design Patterns: low-level solutions related to implementation (Gang of Four patterns: Abstract Factory, Factory, Singleton, Command, etc.)   What goes wrong with software?   At first stage, all software are often clean, elegant, and compelling. But somethings begins to happen in long run. The software starts to rot and everyone blame for other’s false.   Why?      Everyone with different skills, and all have their own code standards. (Some of them believe they’re often right about their design). Time will prove it. I don’t know   Business change all the time, but customers don’t give time for developer to implement new change. (Customers have their own problem, work under their upper manager, or their investor who expect software deploy ASAP)   Under tight budget, deadline, and over-expectation of customers. Developers’re often code under high pressure. They start to break code stardards, skip the best practice guilines to speed up and meet dealine.   Technique debt grows everyday. It accumulates and creates great blocker for development progress.   Ref:   https://web.archive.org/web/20150906155800/http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf https://towardsdatascience.com/10-common-software-architectural-patterns-in-a-nutshell-a0b47a1e9013  ","categories": ["Web Architecture"],
        "tags": ["Web Architecture"],
        "url": "https://willnguyen.work//web%20architecture/software-architecture/",
        "teaser":null},{
        "title": "SQL Optimization",
        "excerpt":"   Try to restrict the queries result set by using the WHERE clause.   Try to restrict the queries result set by returning only the particular columns from the table, not all the table’s columns.   Use views and stored procedures instead of heavy-duty queries.   Whenever possible, try to avoid using SQL Server cursors.   If you need to return the total table’s row count, you can use an alternative way instead of the SELECT COUNT(*) statement.   Try to use constraints instead of triggers, whenever possible.   Use table variables instead of temporary tables.   Try to avoid the HAVING clause, whenever possible.   Whenever possible, try to avoid using the DISTINCT clause.        Include SET NOCOUNT ON statement into your stored procedures to stop the message indicating the number of rows affected by a T-SQL statement.       Use select statements with the TOP keyword or the SET ROWCOUNT statement if you need to return only the first n rows.   Use the FAST number rows table hint if you need to quickly return ‘number rows’ rows.   Try to use UNION ALL statement instead of UNION, whenever possible.   Do not use optimizer hints in your queries.   What are the types of join and explain each? \tInner join, union \tLeft join, right join \tFull join, outer join   Ref: https://www.databasejournal.com/features/mssql/article.php/1437391/Transact-SQL-Optimization-Tips.htm  ","categories": ["Database"],
        "tags": ["Database"],
        "url": "https://willnguyen.work//database/sql-optimization/",
        "teaser":null},{
        "title": "Design Pattern",
        "excerpt":"A design pattern is a general repeatable solution to a commonly occurring problem in software design. It is a description or template for how to solve a problem that can be used in many different situations.   Creational design patterns   These design patterns are all about class instantiation. This pattern can be further divided into class-creation patterns and object-creational patterns. While class-creation patterns use inheritance effectively in the instantiation process, object-creation patterns use delegation effectively to get the job done.      Abstract Factory: Creates an instance of several families of classes   Builder: Separates object construction from its representation   Factory Method: Creates an instance of several derived classes   Object Pool: Avoid expensive acquisition and release of resources by recycling objects that are no longer in use   Prototype: A fully initialized instance to be copied or cloned   Singleton: A class of which only a single instance can exist   Structural design patterns   These design patterns are all about Class and Object composition. Structural class-creation patterns use inheritance to compose interfaces. Structural object-patterns define ways to compose objects to obtain new functionality.      Adapter: Match interfaces of different classes   Bridge: Separates an object’s interface from its implementation   Composite: A tree structure of simple and composite objects   Decorator: Add responsibilities to objects dynamically   Facade: A single class that represents an entire subsystem   Flyweight: A fine-grained instance used for efficient sharing   Private Class Data: Restricts accessor/mutator access   Proxy: An object representing another object   Behavioral design patterns   These design patterns are all about Class’s objects communication. Behavioral patterns are those patterns that are most specifically concerned with communication between objects.      Chain of responsibility: A way of passing a request between a chain of objects   Command: Encapsulate a command request as an object   Interpreter: A way to include language elements in a program   Iterator: Sequentially access the elements of a collection   Mediator: Defines simplified communication between classes   Memento: Capture and restore an object’s internal state   Null Object: Designed to act as a default value of an object   Observer: A way of notifying change to a number of classes   State: Alter an object’s behavior when its state changes   Strategy: Encapsulates an algorithm inside a class   Template method: Defer the exact steps of an algorithm to a subclass   Visitor: Defines a new operation to a class without change   Ref:      Refactoring.guru   sourcemaking.com  ","categories": ["Object Oriented Design"],
        "tags": ["Web Architecture"],
        "url": "https://willnguyen.work//object%20oriented%20design/design-pattern/",
        "teaser":null},{
        "title": "Inversion of Control",
        "excerpt":"Propose by Martin Fowler:   “Inversion of Control is too generic a term, and thus people find it confusing. As a result with a lot of discussion with various IoC advocates we settled on the name Dependency Injection”.   Patterns are all about removing dependencies from your code. Callbacks   Related:     Event-driven programming, the event loop and dispatch of events/messages is handled by the framework   Is programming principle which one of SOLID principle?   The term is related to, but different from, the dependency inversion principle, which concerns itself with decoupling dependencies between high-level and low-level layers through shared abstractions  ","categories": ["Web Architecture"],
        "tags": ["Web Architecture"],
        "url": "https://willnguyen.work//web%20architecture/IoC/",
        "teaser":null},{
        "title": "REST Architecture",
        "excerpt":"   REST: Representational State Transfer.   REST is a style of software architecture which exploits the existing technology Web protocols - HTTP: GET, POST, …   RESTful ref to Web Services implementing such an architecture   A term coined by Roy Fielding in 2000   Architectural Constraints   REST defines 6 architectural constraints which make any web service – a true RESTful API.      Uniform interface   Client–server   Stateless   Cacheable   Layered system   Code on demand (optional)   Uniform interface   Define resources: e.g. api/users for (website, mobile app, other services)   There are 4 guidelines principle:      Resource-Based: EX: API/users.   Manipulation of Resources Through Representations: Client get user id and then delete and modify resource based on that user id.   Self-descriptive Messages: URI + HTTP methods + data as json   Hypermedia as the Engine of Application State (HATEOAS): Include other links for each response, so client can discover more other resources easily.   Client–server   Client application (Mobile, Front end Angular) and server application(Back end) MUST be able to evolve separately without any dependency on each other. A client should know only resource URIs, and that’s all.   Stateless   The server will not store anything about HTTP request.   Advantages:      Scaling by deploying multiple servers. Because no session related dependency.   Less complex – by removing all server-side state synchronization logic.   Easy to cache.   Never loses track, because the client sends all necessary information with each request.   Cacheable   A well-managed caching partially or completely eliminates some client–server interactions   Layered system   An application architecture needs to be composed of multiple layers. Intermediary servers may improve system availability by enabling load-balancing and by providing shared caches.   Code on demand (optional)   return executable code to support a part of your application, e.g., clients may call your API to get a UI widget rendering code.  ","categories": ["Web Architecture"],
        "tags": ["Web Architecture"],
        "url": "https://willnguyen.work//web%20architecture/restful-architecture/",
        "teaser":null},{
        "title": "SQL vs. NoSQL",
        "excerpt":" ","categories": ["Database"],
        "tags": ["Database"],
        "url": "https://willnguyen.work//database/sql-vs-nosql/",
        "teaser":null},{
        "title": "Architectural Patterns",
        "excerpt":"An architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context. Architectural patterns are similar to software design pattern but have a broader scope.      Layered pattern   Client-server pattern   Master-slave pattern   Pipe-filter pattern   Broker pattern   Peer-to-peer pattern   Event-bus pattern   Model-view-controller pattern   Blackboard pattern   Interpreter pattern   Layered pattern: for desktop app, e-commerce web app      Presetation layer   Application layer   Business logic layer   Data access layer   Client-server pattern: email, docs sharing and banking   Master-slave pattern: database replication, Peripherals connected to a bus in a computer system   Pipe-filter pattern: Compilers, Workflow   Broker pattern: Message broker queue,   Peer-to-peer pattern: File-sharing networks, Multimedia protocols   Event-bus pattern: Android development, Notification services   o\tevent source, event listener, channel and event bus o\tListeners subscribe to particular channels.   Model-view-controller pattern: For web app   Blackboard pattern: Speech recognition, Vehicle identification and tracking, Protein structure identification   o\tBlackboard o\tknowledge source o\tcontrol component   Interpreter pattern   o\tDatabase query languages o\tLanguages used to describe communication protocols.   Ref: https://towardsdatascience.com/10-common-software-architectural-patterns-in-a-nutshell-a0b47a1e9013  ","categories": ["Web Architecture"],
        "tags": ["Web Architecture"],
        "url": "https://willnguyen.work//web%20architecture/architectural-patterns/",
        "teaser":null},{
        "title": "Map Reduce",
        "excerpt":"MapReduce is a programming model that allows us to express the simple computations. (batch processing jobs) We were trying to perform but hides the messy details of parallelization, fault-tolerance, data distribution and load balancing in a library, large dataset.   Users specify:      a map function that processes a key/value pair to generate a set of intermediate key/value pairs, and   a reduce function that merges all intermediate values associated with the same intermediate key.      Threading programming:     task manager, delivery task to worker on thread pool, after worker done, get more to execute. Until done.   MapReduce vs Spark   The primary difference between MapReduce and Spark is that MapReduce uses persistent storage and Spark uses Resilient Distributed Datasets   Spark:     Support real-time streaming.     Lesser line code. Features API     In-memory rather disk write.   Ref: white paper by Google in 2004  ","categories": ["Data Engineering"],
        "tags": ["Data Engineering"],
        "url": "https://willnguyen.work//data%20engineering/mapreduce/",
        "teaser":null},{
        "title": "Spark",
        "excerpt":" ","categories": ["Data Engineering"],
        "tags": ["Data Engineering"],
        "url": "https://willnguyen.work//data%20engineering/Spark/",
        "teaser":null},{
        "title": "Different Types of Data Caching",
        "excerpt":"Caching      Client-Side Caching   Server-Side Caching   Content Delivery Network (CDN) Cache   Page Cache   Opcode Cache   Object Cache   Database Cache   Client-Side Caching   Browser caching      Local Storage   Session Storage   IndexedDB   Web SQL   Server-Side Caching      Redis, memcache.   File cache.   Content Delivery Network (CDN) Cache   Cloudflare, Cloudfront AWS, Cloud CDN.   Page Cache  ","categories": ["Web Architecture"],
        "tags": ["Cache"],
        "url": "https://willnguyen.work//web%20architecture/different-types-of-caching/",
        "teaser":null}]
